// Code generated by "gogen cfggen"; DO NOT EDIT.
// Exec: gogen cfggen -n Config -o gen_configs.go Version: 0.0.1
package mysqlcfg

import (
	"github.com/walleframe/walle/services/configcentra"
)

var _ = generateMysqlConfig()

// Config config generate by gogen cfggen.
type Config struct {
	DB        string `json:"db,omitempty"`
	User      string `json:"user,omitempty"`
	Pass      string `json:"pass,omitempty"`
	Addr      string `json:"addr,omitempty"`
	Charset   string `json:"charset,omitempty"`
	Collation string `json:"collation,omitempty"`
	// config prefix string
	prefix string
	// update ntf funcs
	ntfFuncs []func(*Config)
}

var _ configcentra.ConfigValue = (*Config)(nil)

func NewConfig(prefix string) *Config {
	if prefix == "" {
		panic("config prefix invalid")
	}
	// new default config value
	cfg := NewDefaultConfig(prefix)
	// register value to config centra
	configcentra.RegisterConfig(cfg)
	return cfg
}

func NewDefaultConfig(prefix string) *Config {
	cfg := &Config{
		DB:        "",
		User:      "root",
		Pass:      "123456",
		Addr:      "127.0.0.1:3306",
		Charset:   "utf8mb4,utf8",
		Collation: "utf8mb4_unicode_ci",
		prefix:    prefix,
	}
	return cfg
}

// add notify func
func (cfg *Config) AddNotifyFunc(f func(*Config)) {
	cfg.ntfFuncs = append(cfg.ntfFuncs, f)
}

// impl configcentra.ConfigValue
func (cfg *Config) SetDefaultValue(cc configcentra.ConfigCentra) {
	if cc.UseObject() {
		cc.SetObject(cfg.prefix, "redis config", cfg)
		return
	}
	cc.SetDefault(cfg.prefix+".db", "", cfg.DB)
	cc.SetDefault(cfg.prefix+".user", "", cfg.User)
	cc.SetDefault(cfg.prefix+".pass", "", cfg.Pass)
	cc.SetDefault(cfg.prefix+".addr", "", cfg.Addr)
	cc.SetDefault(cfg.prefix+".charset", "", cfg.Charset)
	cc.SetDefault(cfg.prefix+".collation", "", cfg.Collation)
}

// impl configcentra.ConfigValue
func (cfg *Config) RefreshValue(cc configcentra.ConfigCentra) error {
	if cc.UseObject() {
		return cc.GetObject(cfg.prefix, cfg)
	}
	{
		v, err := cc.GetString(cfg.prefix + ".db")
		if err != nil {
			return err
		}
		cfg.DB = (string)(v)
	}
	{
		v, err := cc.GetString(cfg.prefix + ".user")
		if err != nil {
			return err
		}
		cfg.User = (string)(v)
	}
	{
		v, err := cc.GetString(cfg.prefix + ".pass")
		if err != nil {
			return err
		}
		cfg.Pass = (string)(v)
	}
	{
		v, err := cc.GetString(cfg.prefix + ".addr")
		if err != nil {
			return err
		}
		cfg.Addr = (string)(v)
	}
	{
		v, err := cc.GetString(cfg.prefix + ".charset")
		if err != nil {
			return err
		}
		cfg.Charset = (string)(v)
	}
	{
		v, err := cc.GetString(cfg.prefix + ".collation")
		if err != nil {
			return err
		}
		cfg.Collation = (string)(v)
	}
	// notify update
	for _, ntf := range cfg.ntfFuncs {
		ntf(cfg)
	}
	return nil
}
